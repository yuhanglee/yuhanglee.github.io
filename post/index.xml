<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 雪下</title><link>https://yuhanglee.github.io/post/</link><description>Recent content in Posts on 雪下</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 19 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://yuhanglee.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>CAN协议</title><link>https://yuhanglee.github.io/post/car-procotol/can-protocol/</link><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid>https://yuhanglee.github.io/post/car-procotol/can-protocol/</guid><description>&lt;h2 id="can总线定义">CAN总线定义&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>
 &lt;img class="mx-auto" alt="can协议" src="images/CAN-bus.jpg" /> 
 &lt;/p>
&lt;p>一直都说，CAN总线是汽车上最重要的总线接口之一。那么，CAN总线是什么呢？&lt;/p>
&lt;blockquote>
&lt;p>什么是CAN总线?&lt;/p>&lt;/blockquote>
&lt;p>你的汽车就像一个人的身体:控制器区域网络(CAN总线)是神经系统，实现通信。反过来，“节点”或“电子控制单元”(ecu)就像身体的一部分，通过CAN总线相互连接。一部分感知到的信息可以与另一部分共享。&lt;/p></description></item><item><title>go教程-第二天</title><link>https://yuhanglee.github.io/post/go/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/</link><pubDate>Wed, 27 Dec 2023 21:41:43 +0800</pubDate><guid>https://yuhanglee.github.io/post/go/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/</guid><description>&lt;p>我们可以创建属于自己的模块，也叫做&amp;quot;造轮子&amp;quot;。&lt;/p></description></item><item><title>go教程-第一天</title><link>https://yuhanglee.github.io/post/go/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/</link><pubDate>Sun, 24 Dec 2023 22:00:51 +0800</pubDate><guid>https://yuhanglee.github.io/post/go/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/</guid><description>&lt;p>借鉴&lt;a href="http://docscn.studygolang.com/doc/tutorial/getting-started">官方教程&lt;/a>，编写合适基础开发者的Go语言教程。&lt;/p></description></item><item><title>uv使用教程</title><link>https://yuhanglee.github.io/post/2025/%E6%9D%82%E9%A1%B9/uv%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/uv%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate><guid>https://yuhanglee.github.io/post/2025/%E6%9D%82%E9%A1%B9/uv%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/uv%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>&lt;h3 id="安装uv">安装uv&lt;/h3>
&lt;h3 id="创建虚拟环境">创建虚拟环境&lt;/h3>
&lt;h3 id="激活虚拟环境">激活虚拟环境&lt;/h3></description></item><item><title>兆松科技-zcc</title><link>https://yuhanglee.github.io/post/2025/%E6%9D%82%E9%A1%B9/%E5%85%86%E6%9D%BE%E7%A7%91%E6%8A%80/zcc/zcc/</link><pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate><guid>https://yuhanglee.github.io/post/2025/%E6%9D%82%E9%A1%B9/%E5%85%86%E6%9D%BE%E7%A7%91%E6%8A%80/zcc/zcc/</guid><description>&lt;p>2025 年 06 月 06 日，兆松&lt;a href="https://www.elecfans.com/v/">科技&lt;/a>（武汉）有限公司（以下简称“兆松科技”）宣布正式发布高性能 &lt;a href="https://bbs.elecfans.com/zhuti_riscvmcu_1.html">RISC-V&lt;/a> 编译器 ZCC 4.0.0 版本。新版本在性能优化、厂商自定义指令支持和软件库等方面实现全面升级，并同步推出免费社区版，旨在帮助&lt;a href="https://bbs.elecfans.com/group_1231">开发者&lt;/a>降低应用门槛，广泛协同产业链上下游，共同推动 &lt;a href="https://bbs.elecfans.com/zhuti_riscvmcu_1.html">RISC&lt;/a>-V 架构的应用落地与持续发展。&lt;/p>
&lt;p>&lt;strong>主要更新&lt;/strong>&lt;/p>
&lt;p>ZCC 编译器基于 LLVM 框架深度开发，在指令集支持、编译优化等多个维度持续增强。ZCC 4.0.0 版本的主要更新包括：&lt;/p>
&lt;p>完成向 LLVM 19.1.6 版本的迁移；&lt;/p></description></item></channel></rss>