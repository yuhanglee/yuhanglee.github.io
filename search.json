[{"categories":["zephyr"],"content":" quote zephyr 是一个类 Linux 的开发方式， 其工程由 Linux 基金会管理。 Zephyr 项目介绍 Zephyr项目是一个Linux基金会托管的协作项目，一个开源合作项目，联合了业内领先企业，为所有资源受限设备构建了针对资源受限设备进行优化的最佳小型可扩展实时操作系统（RTOS）。 Zephyr 主页 zephyrproject-rtos/zephyr: Zephyr 官网 docs.zephyrproject.org 安装 Ubuntu 环境 Ubuntu安装可以分为两种方式：物理机与虚拟机。 物理机安装：在电脑硬盘上重新安装一个新的 Ubuntu 镜像，每次开机可以选择是否启动 Ubuntu 系统。 虚拟机安装：在 Windows 系统中，安装 Vmware 软件，由软件虚拟出一个“电脑”，安装 Ubuntu ，可以和 Windows 同时启动。 我们选择第二种，使用虚拟机的方式，安装 Ubuntu Server 24.04 LTS。 安装教程，可以参考 VMware安装ubuntu-24.04-live-server服务版超详细教程_ubuntu 24.04 live server-CSDN博客 由于 Ubuntu Server 没有界面，所以我选择使用 VS Code 的 SSH 插件，在 Windows 上进行开发。 VS Code 配置 VS Code 插件库内搜索 《Remote - SSH》并安装。 按下 Ctrl+Shift+P 选择 Remote-SSH， 并填写 Ubuntu 的 IP 地址、用户名、密码。 打开终端窗口，就可以看到已经进入 Ubuntu 系统了。 配置 Zephyr 环境 可以参考 docs.zephyrproject.org 的官方教程，或者按照下面命令依次安装。 # 安装 Zephyr 所依赖的本地环境和软件 sudo apt install cmake python3 device-tree-compiler # 检查软件是否已经安装成功 cmake --version python3 --version dtc --version # 安装 python 虚拟环境 pip3 install virtualenv pip3 install virtualenvwrapper # 创建虚拟环境配置保存目录，并设置环境变量 mkdir $HOME/.virtualenvs sudo vim ~/.zshrc export WORKON_HOME=$HOME/.virtualenvs export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.10 # 根据你的Python路径修改 source /usr/local/bin/virtualenvwrapper.sh # 路径根据virtualenvwrapper 安装路径修改 # 创建虚拟环境，并指定 python 版本 mkvirtualenv -p /usr/bin/python3 env_zephyr # 激活虚拟环境 workon env_zephyr # 使用 pip 安装 west 构建软件，后续用来编译 Zephyr 工程 pip install west # 初始化 Zephyr 工作目录 west init ~/zephyrproject cd ~/zephyrproject # 更新软件 west update # 指定编译器方式有两种： 使用 Zephyr 指定的版本，自定义编译器版本 # 1. 使用 Zephyr 指定版本 # 如果没有 .zephyrrc 则需要自己创建 vim ~/.zephyrrc export ZEPHYR_TOOLCHAIN_VARIANT=zephyr # 2. 如果使用 ARM 芯片，可以手动指定 gnu arm，以及指定工具链路径 vim ~/.zephyrrc export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb export GNUARMEMB_TOOLCHAIN_PATH=/usr/arm-none-eabi # 执行本地的 arm-none-eabi 路径，该路径下有 bin 文件夹 # 如果使用 west build 编译报错找不到 ninja，则需要安装 ninja 环境。 apt install ninja-build # ninja --verion # 全部更新完成之后的软件列表如下： \u003e ls bootloader modules tools zephyr 测试编译速度 在 ~/zephyrproject 路径下，执行 time west build -b stm32f103_mini zephyr/samples/hello_world --build-dir build/stm32f103_mini。 # 进入 zephyr 工作目录 \u003e cd ~/zephyrproject # 切换 python 虚拟环境，如果之前已经进入，则不需要这个步骤。 # 一般会有报错： 无法找到 west 软件 \u003e workon env_zephyr # -b : 执行控制器 # zephyr/samples/hello_world 需要编译的应用 # --build-dir build/stm32f103_mini 指定编译结果保存路径 也可以使用 -d build/stm32f103_mini \u003e time west build -b stm32f103_mini zephyr/samples/hello_world --build-dir build/stm32f103_mini # 编译正常完成。共用时 20.921 秒 [135/135] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used FLASH: 12854 B 256 KB 4.90% RAM: 4160 B 48 KB 8.46% IDT_LIST: 0 GB 32 KB 0.00% Generating files from /home/liyuhang/zephyrproject/build/stm32f103_mini/zephyr/zephyr.elf for board: stm32f103_mini west build -b stm32f103_mini zephyr/samples/hello_world --build-dir 35.57s user 15.28s system 243% cpu 20.921 total 至此，Zephyr 基础环境配置工作已经完成。 ","date":"2025-02-04","objectID":"/posts/e3e350c/:0:0","tags":["教程"],"title":"zephyr教程-环境配置","uri":"/posts/e3e350c/"},{"categories":["draft"],"content":" 启动 启动是系统的第一个动作。 系统在完成堆桟初始化之后，就可以调用 rtthread_startup 函数，完成操作系统启动动作。 rtthread_startup 函数内主要操作： 关闭中断 初始化必要的片上驱动 初始化系统定时器 初始化系统调动器 初始化信号，如果使用了的话 创建第一个应用线程 创建定时器线程 创建空闲线程 加锁CPU锁 最后启动调度器，在调度器内启动第一个线程(一般为main线程)，并且永远都不会返回。 信息 为啥不会返回呢？因为完成调度之后，就跳转到第一个线程上执行，且后续会在各个线程中跳转，无法返回调度器函数。 void rt_system_scheduler_start(void) { struct rt_thread *to_thread; rt_ubase_t highest_ready_priority; /** * legacy rt_cpus_lock. some bsp codes still use it as for it's critical * region. Since scheduler is never touching this, here we just release it * on the entry. */ // 主动释放掉 `cpus` 锁，防止前面使用过忘记释放。 rt_hw_spin_unlock(\u0026_cpus_lock); /* ISR will corrupt the coherency of running frame */ rt_hw_local_irq_disable(); /** * for the accessing of the scheduler context. Noted that we don't have * current_thread at this point */ // 加锁调度器。 // 我们还没有完成调度器初始化，所以无法使用多核调度，也就不能让其他核心使用调度器。 _fast_spin_lock(\u0026_mp_scheduler_lock); /* get the thread scheduling to */ // 获取当前就绪列表中优先级最高的任务 // 任务在执行 `rt_thread_startup` 之后，就已经加入就绪列表中。 // 一般在启动调度器之前，只会初始化个别系统任务。如：主任务、空闲任务、软件定时器任务。 to_thread = _scheduler_get_highest_priority_thread(\u0026highest_ready_priority); // 最高任务不能为空，这个很好解释，如果将要跳转的先成为空，那应该向哪里跳转呢。 RT_ASSERT(to_thread); /* to_thread is picked to running on current core, so remove it from ready queue */ // todo: _sched_remove_thread_locked(to_thread); /* dedigate current core to `to_thread` */ // 重新设置第一个线程的核心为启动核，当然启动核心也非必须是ID为0的核心 // 需要考虑一个问题，除了主线程在调度器启动之后立即执行，其余线程，如空闲线程，软件定时器线程是否永远被启动核绑定并执行？ RT_SCHED_CTX(to_thread).oncpu = rt_hw_cpu_id(); RT_SCHED_CTX(to_thread).stat = RT_THREAD_RUNNING; LOG_D(\"[cpu#%d] switch to priority#%d thread:%.*s(sp:0x%08x)\", rt_hw_cpu_id(), RT_SCHED_PRIV(to_thread).current_priority, RT_NAME_MAX, to_thread-\u003eparent.name, to_thread-\u003esp); _fast_spin_unlock(\u0026_mp_scheduler_lock); /* switch to new thread */ // 切换到第一个任务，需要了解的是，第一次切换，不需要 from 线程，也就是说，只需要知道跳转地址就行。 rt_hw_context_switch_to((rt_ubase_t)\u0026to_thread-\u003esp, to_thread); /* never come back */ // 永远不会执行到这里 // 建议增加一行代码 // RT_DEBUG(0); // 这样在启动失败之后，可以非常迅速定位到问题 } 信息 软件定时器会直接绑定到启动核心，但是空闲任务是每个核心都会执行，所以不需要特别关心。 ","date":"2024-06-04","objectID":"/posts/b234ee6/:0:0","tags":["draft"],"title":"RTT 启动顺序","uri":"/posts/b234ee6/"},{"categories":["draft"],"content":"1 切换上下文 提到任务切换，跨不过去的一道坎就是上下文切换。把操作系统比作整个人体的话，系统定时器就是心脏，调度器就是大脑，决定下一个可执行哪个任务，而上下文切换就是记忆体，来保存上个动作和恢复当前动作。 每个处理器对待现场的处理都是不一样的。例如 ARM 处理器需要使用汇编语句一次保存通用寄存器和状态寄存器。而 TriCore 核心有自己的上下文保存区域，简称 CSA(Content Savee Area)。 ","date":"2024-06-04","objectID":"/posts/b234ee6/:1:0","tags":["draft"],"title":"RTT 启动顺序","uri":"/posts/b234ee6/"},{"categories":["draft"],"content":"1.1 CSA CSA 是 TriCore 核心的一个特点，在某一个指定的区域按照既定的规则来存储上下文片段，每个片段可以直接将现场保存，可以认为是\"快照\"，比较容易保存和恢复。每个 CSA 占用空间为 64字节。实际占用空间可以通过设置 CPU_FCX 寄存器初始化第一个 CSA 元素。 TODO: CSA 教程 ","date":"2024-06-04","objectID":"/posts/b234ee6/:1:1","tags":["draft"],"title":"RTT 启动顺序","uri":"/posts/b234ee6/"},{"categories":["draft"],"content":"1.2 切换上下文 上面提到了每个 CSA 块都可以保存一个现场，其要执行的操作就是从 空闲链表 中申请一块，存储现场之后，在放到上一个被使用的 CSA 块的 NEXT 位置，该位置需要按照规定的公式进行计算得出。同样，恢复现场的时候，需要将当前 CSA 块清空之后，再释放到 空闲链表 中，并设置 FCX 寄存器的值。 /* 获取当前线程的 CSA LinkWord */ current_upper_csa = LINKWORD_TO_ADDRESS(__mfcr(CPU_PCXI)); /* 保存当前线程的 CSA 上下文 */ *((unsigned long *) from) = current_upper_csa[0]; /* 将 to 线程的 CSA 地址赋值给当前线程的上层上下文的 LinkWord ，用于 TriCore 自动切换线程。*/ current_upper_csa[0] = *((unsigned long *) to); ","date":"2024-06-04","objectID":"/posts/b234ee6/:1:2","tags":["draft"],"title":"RTT 启动顺序","uri":"/posts/b234ee6/"},{"categories":null,"content":"本博客是由hugo构建的，使用的主题为 stack。下面介绍一个比较方便的使用 hugo + stack + github page 来构建属于自己的博客。 可以参考 hugo-stack开始指南来执行构建过程。 下面我简单复刻一下过程，并对我认为需要注意的地方进行标注。 使用 hugo-stack-starter 仓库作为模板，来创建当前仓库. 修改配置文件，并启动本地服务 使用 git clone github.com/username/username.github.io.git，将项目克隆到本地执行。需要注意的是，如果想要在本地执行的话，则需要配置hugo环境和安装 stack 主题。 可以使用另一种方式查看当前的项目页面。 在当前仓库内，点击 code -\u003e Codespaces -\u003e + ，添加一个对应的代码空间。该空间是一个云端，由github提供。 等待进度加载完成。加载过程中是在构建hugo环境和下载对应的组件及主题。 进度完成之后，执行 hugo serve -D 即可开启远端服务。 使用 CTRL按键 + 鼠标 点击 localhost:1313，就可以打开网页。欣赏自己的第一个博客。 配置自动构建工具和分支。 当然，有可能打开页面之后，还是显示 hugo-stack 主题页面，那是因为我们还没有完成项目相关配置，也是新手比较容易踩坑的地方。 配置 config.yaml 文件。 按照 hugo-stack-starter 的 readme.md 文件中第四条，需要修改 config/_default/config.toml 文件中的内容。该文件名称也可能为 config/_default/config.yaml 注意语法即可。 baseurl: https://username.github.io/ languageCode: zh-cn theme: stack paginate: 10 title: my blog # Change it to your Disqus shortname before using disqusShortname: stack 修改主分支名称 主分支默认名称为 master，这里需要修改。参考一下步骤： 修改 .github/workflows/deploy.yml 文件内容，将master修改为main on: push: branches: [main] pull_request: branches: [main] 修改仓库的主分支名称 依次点击仓库的 Settings -\u003e General -\u003e Default branch ，就可以看到当前默认分支名称为 master，需要修改为 main。 至于为啥不能使用 master，暂时我也不是很清楚原因。等找到原因之后，再补充吧。 选择博客用于展示的分支 依次点击 Settings -\u003e Pages -\u003e Branch，修改需要构建和部署的分支，选择 gh-pages。 至此，博客部署就完成了，后续只需按时提交自己的内容即可。 恭祝大家有一个优秀的体验。 ","date":"2024-05-20","objectID":"/posts/hugo-start/:0:0","tags":null,"title":"Hugo Start","uri":"/posts/hugo-start/"},{"categories":["汽车","CAN","协议"],"content":"CAN是汽车上常用的总线接口。","date":"2024-05-19","objectID":"/posts/can-protocol/","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1 CAN总线定义 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:0","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.1 定义 一直都说，CAN总线是汽车上最重要的总线接口之一。那么，CAN总线是什么呢？ 什么是CAN总线? 你的汽车就像一个人的身体:控制器区域网络(CAN总线)是神经系统，实现通信。反过来，“节点”或“电子控制单元”(ecu)就像身体的一部分，通过CAN总线相互连接。一部分感知到的信息可以与另一部分共享。 can总线 什么是ECU 在汽车CAN总线系统中，ECU可以是发动机控制单元、安全气囊、音响系统等。一辆现代汽车可能有多个ECU，每个ECU都有可能需要与其他网络部分共享的信息。 这就是CAN标准排得上用场的地方： CAN总线可以连接多个ECU，并进行通信 使用双绞线，无复杂的专用布线，网络拓展性强 支持仲裁和抢占，以及可以报告错误帧 支持一对一和一对多通信 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:1","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.2 OSI网络 用更专业的术语来说，CAN(controller area network)是由数据链路层和物理层来描述，在高速CAN中，ISO 11898-1 描述了数据链路层，ISO 11898-2 描述了物理层，如图所示，CAN的作用经常出现在7层OSI中。 CAN总线物理层定义了电路类型、电信号水平、节点要求、电缆阻抗等。例如：ISO 11898-2规定了许多事情，包括以下内容 波特率： CAN节点必须使用两根绞线相连，经典CAN最高可以达到1Mbps，CANFD数据域最高可以达到5Mbps 电缆长度： 最大的长度可以达到 500米（125Kbps）或者40米（1Mbps） 终端： CAN总线两端必须都正确的使用120欧姆终端电阻 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:2","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.3 高速CAN 在汽车总线的定义中，会经常遇到不同类型的网络：下面我们提供一个简单的概述： 高速CAN总线： 本文的重点是高速CAN总线(ISO 11898)。它是迄今为止物理层最流行的CAN标准协议，波特率支持从40Kbps到1Mbps。只需要简单的双绞线，就可以满足简单的汽车应用。还可以作为OBD，J1939，NMEA 2000，CANOpen等高层协议的基础。第二代CAN被称为CANFD，数据域可以最高支持5Mbps。 低速CAN总线： 该标准支持的波特率较低，为40Kbps到125Kbps，且可以允许在两条总线出现故障之后，继续进行通信。因此，也被称为\"容错CAN\"。 LIN总线： LIN总线是CAN总线的低成本补充，其只需要3根线就可以完成通信，可以进行更加简单的布线和更经济的网络。 以太网： 当今随着新能源的崛起，车辆功能越来越复杂。新能源车辆以支持ADAS(高级驾驶辅助系统)、信息娱乐系统、摄像头等高带宽要求。与CAN总线相比，汽车以太网提供了更高的数据传入速率，但缺乏经典CAN和CAN FD的一些安全/性能的特征。未来一段时间，CAN、CAN FD、CAN XL和以太网基友可能同事应用于新的汽车和工业开发。 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:3","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.4 CAN总线优点 由于CAN总线具有以下优点，CAN总线标准几乎用于所有车辆和许多场景。 简单，低成本 ECU可以通过单个CAN系统进行通信，而不使用更加复杂的模拟信号总线，从而减少了错误、复杂、布线、成本。 集中 CAN总线提供了与所有ECU网络通信的入口点，且不分主从，可以进行双向通信，从而实现中央诊断、数据记录和配置。 健壮 该系统对电气干扰和电磁干扰具有鲁棒性，是安全关键应用的理想选择 高效 CAN具有仲裁性，数据报文可以按照ID确定优先级，以便最高优先级的数据得到立即总线访问，而不会导致其他帧的中断。 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:4","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.5 CAN 历史 短暂介绍 CAN总线 的历史： Pre CAN : 汽车ECU依赖与复杂的点对点总线协议 1986: 博世开发了CAN协议作为一个解决方案 1991: 博世发布了CAN2.0，分为CAN 2.0 A(标准帧，11bit)和CAN 2.0 B(扩展帧，29bit) 1993: CAN 被采纳为国际标准， ISO 11898 2003: ISO11898 变为标准服务 2012: 博世发布CANFD 1.0版本，加入了可变数据速率 2015: CANFD协议被标准化，ISO11898-1 2016: CAN物理层传输速率变为最大5Mbps，ISO11898-2 2018: 开始CAN XL开发 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:5","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.6 CAN总线的未来 展望未来，CAN总线协议将保持相关性。 尽管CAN总线还受到以下主要趋势的影响： 对日益先进的车辆功能需求 云计算兴起 物联网（IOT）和联网汽车的增长 自动驾驶汽车的影响 特别是互联汽车(V2X)和云计算的兴起，将导致汽车远程信息处理和IOT CAN记录仪 的快速增长。反过来，使CAN总线网络“在线”，也会使得车辆面临一些安全风险，并且可能需要转向新的CAN协议，例如：CAN FD。 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:6","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.7 CANFD CAN FD 的定义 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:7","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"1.8 CAN FD 的兴起 随着车辆功能的扩展，CAN总线的负载也在增加。为了支持这一点，CAN FD 被设计为“下一代”CAN总线。与经典CAN相比，CAN FD 提供了三个好处： 支持最高 8M bps 的数据域可变速率 数据域最多支持64个字节传输 通过身份验证提供了安全性 简而言之，CAN FD 提高了速度和效率，因此在交心的车辆中得到了推广。同样，这也会对 IOT CAN FD 数据记录器的需求日益增加。 ","date":"2024-05-19","objectID":"/posts/can-protocol/:1:8","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"2 CAN 报文定义 ","date":"2024-05-19","objectID":"/posts/can-protocol/:2:0","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["汽车","CAN","协议"],"content":"2.1 什么是CAN报文定义 CAN总线上的 通信是通过CAN报文来定义，通常也会称为CAN报文。 下图是CAN标准帧(CAN 2.0 A)的位定义，其中包括11bit的标识符(ID)，可以满足大多数汽车使用。扩展帧(CAN 2.0 B)除了标识符更长，达到了29bit，并且EXT需要置为显性电平，其余都和标准帧保持一致。 各个段的定义和作用如下； 起始位 结束位 长度 定义 作用 注意 0 0 1 SOF 起始帧位 始终为 1 1 11 11 ID 标识符 扩展帧为29位 12 12 1 RTR 远程帧 13 18 6 CTRL 控制 19 84 64 DATA 数据域 85 100 16 CRC 校验码 101 102 2 ACK 回应字 103 109 7 EOF 结束帧 警告 ID: CAN 报文发送报文时，是需要获取仲裁权的。ID 数值越小，优先级越高。 控制位：包括 IDE 和 DLC，用来指定扩展帧位和字节长度(0~8)。 ","date":"2024-05-19","objectID":"/posts/can-protocol/:2:1","tags":["教程"],"title":"CAN协议","uri":"/posts/can-protocol/"},{"categories":["教程","C教程"],"content":"第一张 ","date":"2024-05-06","objectID":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/:1:0","tags":["C教程"],"title":"征服C指针 第一天","uri":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","C教程"],"content":"第二章 ","date":"2024-05-06","objectID":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/:2:0","tags":["C教程"],"title":"征服C指针 第一天","uri":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","C教程"],"content":"第三章 ","date":"2024-05-06","objectID":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/:3:0","tags":["C教程"],"title":"征服C指针 第一天","uri":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","C教程"],"content":"3-1 ","date":"2024-05-06","objectID":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/:4:0","tags":["C教程"],"title":"征服C指针 第一天","uri":"/projects/c%E8%AF%AD%E8%A8%80/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88/%E5%BE%81%E6%9C%8Dc%E6%8C%87%E9%92%88-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["经验"],"content":"个人的一些经历和项目经验更新，同时也会记录日常开发中使用的开发工具。 TC297驱动研究 xmake 第一天 go 第一天 go 第二天 ","date":"2024-01-11","objectID":"/posts/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/:0:0","tags":["项目"],"title":"项目经验","uri":"/posts/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"},{"categories":["xmake"],"content":"xmake官方教程 ","date":"2024-01-02","objectID":"/posts/xmake%E7%AC%AC%E4%B8%80%E5%A4%A9/:0:0","tags":["xmake"],"title":"xmake-第一天","uri":"/posts/xmake%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["xmake"],"content":"1 1. 安装 xmake sudo add-apt-repository ppa:xmake-io/xmake sudo apt update sudo apt install xmake ","date":"2024-01-02","objectID":"/posts/xmake%E7%AC%AC%E4%B8%80%E5%A4%A9/:1:0","tags":["xmake"],"title":"xmake-第一天","uri":"/posts/xmake%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"我们可以创建属于自己的模块，也叫做\"造轮子\"。 软件开发过程中，可能要使用各种模块来完成一些小功能或者编写小工具，此时就需要有一个简单，易懂，方便的外部模块来实现特定功能，防止因为功能多，造成代码臃肿。 ","date":"2023-12-27","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/:0:0","tags":["go教程"],"title":"go教程-第二天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"创建Go模块 模块内，只需要实现特定功能，尽量简洁。如果需要完成不属于该模块的功能，则需要调用其他模块。 首先，需要创建一个Go模块。在模块内，可以为一组离散且有用的函数组成一个或多个相关模块包。例如，可以创建一个包，其中包含具有执行财务分析功能的包，其他编写和财务相关应用程序的开发者就可以在该模块基础之上完成对应功能。 ","date":"2023-12-27","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/:1:0","tags":["go教程"],"title":"go教程-第二天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"1 创建绿色模块 在模块源码路径中初始化当前目录。 \u003e go mod init greetings go: creating new go.mod: module greetings 在该目录下，新建文件，并命名为 greetings.go，并将下面的代码粘贴到文件内。 package greetings import \"fmt\" // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf(\"Hi, %v. Welcome!\", name) return message } 至此，模块内代码已经完成。该模块定义了一个函数 Hello，被外部调用时，输出 Hi \u003cname\u003e. Welcome!。 由以上的函数，可以得出几个结论： 函数关键字为 func 和C语言不一样的是，参数先写变量名称，后跟参数类型 返回类型写到最后 语句不以分号结束，按照行结束 message 未定义类型，是弱类型语言 ","date":"2023-12-27","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/:2:0","tags":["go教程"],"title":"go教程-第二天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"调用模块 除了定义的模块外，还需要可以由外部模块，调用该模块内函数或变量，以完成我们最初的功能。 admin@DESKTOP-NQU1HUV E:\\go\\dayStudy\\2day\\hello $ go mod tidy go: found greetings in greetings v0.0.0-00010101000000-000000000000 admin@DESKTOP-NQU1HUV E:\\go\\dayStudy\\2day\\hello $ go run . Hi, Gladys. Welcome! ","date":"2023-12-27","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/:3:0","tags":["go教程"],"title":"go教程-第二天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%BA%8C%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"借鉴官方教程，编写合适基础开发者的Go语言教程。 作者是由 C语言开发者 入门 Go语言，中间是经历了一个语言的切换过程。事情的起由是需要一个嵌入式的配置平台，计划使用桌面开发框架 Qt/Electron/.Net之类的，之前也使用过这些编写过小工具，语言集成度，完善度都是不错的。但是，软件需要拷贝，每次升级之后，都需要在各个系统平台上进行测试，且面临着跨平台需求。所以，本次选用了Web平台，搭建到局域网内，每个用户只需要远程登陆网址就可以，减少团队内部更新软件不便，且只需要维护一个软件就可以完成跨平台操作。 好了，今天开始我们的第一章教程吧。 ","date":"2023-12-24","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/:0:0","tags":["go教程"],"title":"go教程-第一天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"Go 环境配置 Go环境配置包括 安装GO ， 配置环境变量， 编写第一个程序。 ","date":"2023-12-24","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/:1:0","tags":["go教程"],"title":"go教程-第一天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"1 安装Go 安装Go要按照 官方步骤 进行安装。 ","date":"2023-12-24","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/:2:0","tags":["go教程"],"title":"go教程-第一天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"2 使用Go 在安装完成之后，可以查看一下Go安装是否正常。 C:\\Users\\admin\u003ego version go version go1.21.5 windows/amd64 C:\\Users\\admin\u003e 接下来，就可以编写自己的程序了。我在 win10 下使用 VSCode 进行程序编写，你可以使用其他的编辑器或IDE。 创建一个hello.go文件，用来编写示例代码。 \u003e mkdir hello \u003e cd hello 创建依赖项。 \u003e go mod init example.com/hello go: creating new go.mod: module example.com/hello 编写第一行go代码，输出Hello, World!。 package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } 运行程序。 \u003e go run . Hello, World! ","date":"2023-12-24","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/:3:0","tags":["go教程"],"title":"go教程-第一天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["教程","go教程"],"content":"3 go 帮助文档 go run是我们开发go使用最多的公式之一。除了 go run 之外，go还支持其他的命令和参数，如我们刚才使用过的mod，version。其支持的命令和参数，可以使用 go help进行查看。 C:\\Users\\admin\u003ego help Go is a tool for managing Go source code. Usage: go \u003ccommand\u003e [arguments] The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get add dependencies to current module and install them install compile and install packages and dependencies list list packages or modules mod module maintenance work workspace maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages Use \"go help \u003ccommand\u003e\" for more information about a command. Additional help topics: buildconstraint build constraints buildmode build modes c calling between Go and C cache build and test caching environment environment variables filetype file types go.mod the go.mod file gopath GOPATH environment variable gopath-get legacy GOPATH go get goproxy module proxy protocol importpath import path syntax modules modules, module versions, and more module-get module-aware go get module-auth module authentication using go.sum packages package lists and patterns private configuration for downloading non-public code testflag testing flags testfunc testing functions vcs controlling version control with GOVCS Use \"go help \u003ctopic\u003e\" for more information about that topic. ","date":"2023-12-24","objectID":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/:4:0","tags":["go教程"],"title":"go教程-第一天","uri":"/posts/go%E6%95%99%E7%A8%8B-%E7%AC%AC%E4%B8%80%E5%A4%A9/"},{"categories":["themes","syntax"],"content":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","date":"2023-09-07","objectID":"/posts/markdown-syntax/","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme. ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:0:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"1 Headings The following HTML \u003ch1\u003e—\u003ch6\u003e elements represent six levels of section headings. \u003ch1\u003e is the highest section level while \u003ch6\u003e is the lowest. ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:1:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"H1 ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:2:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"1 H2 ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:3:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"1.1 H3 1.1.1 H4 1.1.1.1 H5 1.1.1.1.1 H6 ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:3:1","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"2 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat. Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat. ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:4:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"3 Blockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations. ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:5:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"3.1 Blockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote. ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:5:1","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"3.2 Blockquote with attribution Don’t communicate by sharing memory, share memory by communicating. — Rob Pike1 ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:5:2","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"4 Tables Tables aren’t part of the core Markdown spec, but Hugo supports supports them out-of-the-box. Name Age Bob 27 Alice 23 ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:6:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"4.1 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:6:1","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"5 Code Blocks ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:7:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"5.1 Code block with backticks \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:7:1","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"5.2 Code block indented with four spaces \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eExample HTML5 Document\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eTest\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:7:2","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"5.3 Diff code block [dependencies.bevy] git = \"https://github.com/bevyengine/bevy\" rev = \"11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\" - features = [\"dynamic\"] + features = [\"jpeg\", \"dynamic\"] ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:7:3","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"5.4 One line code block \u003cp\u003eA paragraph\u003c/p\u003e ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:7:4","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"6 List Types ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:8:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"6.1 Ordered List First item Second item Third item ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:8:1","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"6.2 Unordered List List item Another item And another item ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:8:2","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"6.3 Nested list Fruit Apple Orange Banana Dairy Milk Cheese ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:8:3","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":["themes","syntax"],"content":"7 Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format. H2O Xn + Yn = Zn Press CTRL + ALT + Delete to end the session. Most salamanders are nocturnal, and hunt for insects, worms, and other small creatures. The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎ ","date":"2023-09-07","objectID":"/posts/markdown-syntax/:9:0","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"/posts/markdown-syntax/"},{"categories":null,"content":"Create beautiful interactive image gallery using Markdown","date":"2023-08-26","objectID":"/posts/image-gallery/","tags":null,"title":"Image gallery","uri":"/posts/image-gallery/"},{"categories":null,"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It’s powered by PhotoSwipe and its syntax was inspired by Typlog. To use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo’s page bundle feature to read the dimensions of the image. External images are not supported. ","date":"2023-08-26","objectID":"/posts/image-gallery/:0:0","tags":null,"title":"Image gallery","uri":"/posts/image-gallery/"},{"categories":null,"content":"1 Syntax ![Image 1](1.jpg) ![Image 2](2.jpg) ","date":"2023-08-26","objectID":"/posts/image-gallery/:1:0","tags":null,"title":"Image gallery","uri":"/posts/image-gallery/"},{"categories":null,"content":"2 Result Photo by mymind and Luke Chesser on Unsplash ","date":"2023-08-26","objectID":"/posts/image-gallery/:2:0","tags":null,"title":"Image gallery","uri":"/posts/image-gallery/"},{"categories":null,"content":"Math typesetting using KaTeX","date":"2023-08-24","objectID":"/posts/math-typesetting/","tags":null,"title":"Math Typesetting","uri":"/posts/math-typesetting/"},{"categories":null,"content":"Stack has built-in support for math typesetting using KaTeX. It’s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml. ","date":"2023-08-24","objectID":"/posts/math-typesetting/:0:0","tags":null,"title":"Math Typesetting","uri":"/posts/math-typesetting/"},{"categories":null,"content":"1 Inline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ ","date":"2023-08-24","objectID":"/posts/math-typesetting/:1:0","tags":null,"title":"Math Typesetting","uri":"/posts/math-typesetting/"},{"categories":null,"content":"2 Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}\\infty\\hat f(\\xi),e{2 \\pi i \\xi x},d\\xi $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24","objectID":"/posts/math-typesetting/:2:0","tags":null,"title":"Math Typesetting","uri":"/posts/math-typesetting/"},{"categories":null,"content":"Lruihao's friends","date":"2021-09-19","objectID":"/friends/","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":"基本資訊 - nickname: 菠菜眾長 avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: 不怕萬人阻擋，只怕自己投降 ","date":"2021-09-19","objectID":"/friends/:1:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":"友情提醒 Notice 互換友鏈請按以上格式在評論留言。（僅限個人非商業部落格/網站）  網站失效、停止維護、內容不當都可能被取消連結！ 那些不尊重他人勞動成果，轉載不加出處的，或惡意行為的網站，還請你不要來進行交換了。 ","date":"2021-09-19","objectID":"/friends/:2:0","tags":null,"title":"友情鏈接","uri":"/friends/"},{"categories":null,"content":"互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！","date":"2021-09-13","objectID":"/guestbook/","tags":null,"title":"留言","uri":"/guestbook/"},{"categories":null,"content":" Welcome 互联网的广大朋友们，欢迎光临我的小博客！欢迎留言！ 温馨提示，音乐自动播放，请带好耳机～ From playlist, Powered By mmt-netease 给博主买杯卡布奇诺～ 赞赏 支付宝 微信 ","date":"2021-09-13","objectID":"/guestbook/:0:0","tags":null,"title":"留言","uri":"/guestbook/"}]